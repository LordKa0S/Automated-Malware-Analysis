import hashlib
import os

class File:
    def file_analyzer(self):
        stream = r'C:\Users\shantanu.vichare\PycharmProjects\Sandbox\resources\FirefoxInstaller.exe'
        result = self._compute_hashes(stream=stream)
        print result

    # Compute Hashes for current file
    def _compute_hashes(self, stream):
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        sha256 = hashlib.sha256()
        hashes = {}

        while True:
            data = stream.read(4096)
            if data:
                md5.update(data)
                sha1.update(data)
                sha256.update(data)
            else:
                stream.seek(0, 0)
                break

        hashes['md5'] = md5.hexdigest()
        hashes['sha1'] = sha1.hexdigest()
        hashes['sha256'] = sha256.hexdigest()

        return hashes

    # def _store_file(self, filename, stream):
    #     self['filepath'] = u'{0}/{1}'.format(self['sha256'], filename)
    #     self['filepath'] = os.path.join(fame_config.storage_path, self['filepath'])
    #
    #     # Create parent dirs if they don't exist
    #     try:
    #         os.makedirs(os.path.join(fame_config.storage_path, self['sha256']))
    #     except:
    #         pass
    #
    #     # Save file contents
    #     with open(self['filepath'], "wb") as fd:
    #         while True:
    #             data = stream.read(4096)
    #             if data:
    #                 fd.write(data)
    #             else:
    #                 stream.seek(0, 0)
    #                 break
    #
fileObj = File()
fileObj.file_analyzer()