import yara
from os import listdir, getcwd, walk, remove
from os.path import normpath, join
import zipfile


magic_dict = {
    "\x1f\x8b\x08": "gz",
    "\x42\x5a\x68": "bz2",
    "\x50\x4b\x03\x04": "zip"
}

max_len = max(len(x) for x in magic_dict)


def file_type(filename):
    with open(filename) as f:
        file_start = f.read(max_len)
    for magic, filetype in magic_dict.items():
        if file_start.startswith(magic):
            return filetype
    return "no match"


RULE_DIR = r'/home/sanket/Desktop/BEPROJECT/Automated-Malware-Analysis/Analysis/testing/rules'
FILE_TO_SCAN = r'/home/sanket/Desktop/BEPROJECT/Automated-Malware-Analysis/Analysis/testing/test'


rulefiles = listdir(RULE_DIR)
address = {'namespace '+str(i): normpath(join(RULE_DIR,
                                              rulefiles[i])) for i in range(0, len(rulefiles))}
rules = yara.compile(filepaths=address)
rules.save(normpath(join(getcwd(), 'my_compiled_rules')))
rules = yara.load(normpath(join(getcwd(), 'my_compiled_rules')))


def mycallback(data):
    print data['rule']
    return yara.CALLBACK_CONTINUE


prevcount, zipcount = 0, 0
while True:
    for root, subdir, files in walk(FILE_TO_SCAN):
        for filename in files:
            file_path = join(root, filename)
            type = file_type(file_path)
            if type == 'zip':
                zip_ref = zipfile.ZipFile(file_path, 'r')
                zip_ref.extractall(r'/home/sanket/Desktop/BEPROJECT/Automated-Malware-Analysis/Analysis/testing/test')
                zip_ref.close()
                remove(file_path)
                zipcount += 1
    if prevcount is zipcount:
        break
    else:
        prevcount += 1

for root, subdir, files in walk(FILE_TO_SCAN):
    for filename in files:
        file_path = join(root, filename)
        type = file_type(file_path)
        if type != 'zip':
            matches = rules.match(file_path, callback=mycallback,
                                  which_callbacks=yara.CALLBACK_MATCHES)
