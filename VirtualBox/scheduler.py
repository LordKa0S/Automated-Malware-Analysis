import vboxapi
from time import time, sleep
import const
from os.path import basename
import logging
from VBinit import *
virtualBoxManager = vboxapi.VirtualBoxManager(None, None) 
vbox = virtualBoxManager.getVirtualBox()
vboxVMList = virtualBoxManager.getArray(vbox, 'machines')
vboxNameList = [mach.name for mach in vboxVMList]
logging.basicConfig(format='%(levelname)s:\t%(message)s', level=logging.DEBUG)

#print vboxNameList
for MACH_NAME in vboxNameList:
	mach = vbox.findMachine(MACH_NAME)
	state_value = mach.sessionState is virtualBoxManager.constants.SessionState_Unlocked
	if state_value is True:
		try:
		    vbox = virtualBoxManager.getVirtualBox()
		    todo = vbox.findMachine(MACH_NAME)
		    alreadyRunning = todo.state is not virtualBoxManager.constants.MachineState_PoweredOff
		    logging.info("Machine " + ("started" if alreadyRunning else "starting"))
		    session = virtualBoxManager.getSessionObject(vbox)
		    if not alreadyRunning:
		        progress = todo.launchVMProcess(session, "headless", None)
		    else:
		        todo.lockMachine(session, virtualBoxManager.constants.LockType_Write)
		    try:
		        if not alreadyRunning:
		            progress.waitForCompletion(-1)
		            if progress.resultCode is not 0:
		                raise Exception("Machine failed to start: ",
		                                progress.errorInfo.text)
		        logging.info("Machine locked")
		        start = time()
		        while session.console.guest.additionsRunLevel < virtualBoxManager.constants.AdditionsRunLevelType_Userland and time() - start < 180:
		            pass
		        if not time() - start < 180:
		            raise Exception("OS took too long to load")
		        logging.debug("OS loaded in %.2f sec", time() - start)
		        sleep(5)
		        runner = session.console.guest.createSession(UNAME, PASSWD, None, None)
		        try:
		            runner.waitFor(
		                virtualBoxManager.constants.GuestSessionWaitForFlag_Start, 30 * 1000)
		            if runner.status is not virtualBoxManager.constants.GuestSessionStatus_Started:
		                raise Exception(
		                    "Guest session did not start after ", 30, " sec")
		            copy = runner.fileCopyToGuest(SOURCE_PATH, DEST_PATH, None)
		            copy.waitForCompletion(-1)
		            if not runner.fileExists(DEST_PATH, False):
		                raise Exception("Copying failed")
		            if vbox.getGuestOSType(session.console.guest.OSTypeId).familyId == 'Linux':
		                changePermission = runner.processCreate("/bin/chmod", ["+x", DEST_PATH], None, [
		                                                        virtualBoxManager.constants.ProcessCreateFlag_WaitForProcessStartOnly], 0)
		                changePermission.waitFor(
		                    virtualBoxManager.constants.ProcessWaitForFlag_Terminate, 0)
		                logging.info("Permissions changed")
		            realExec = runner.processCreate(DEST_PATH, None, None, [
		                                            virtualBoxManager.constants.ProcessCreateFlag_WaitForProcessStartOnly], 0)
		            realExec.waitFor(
		                virtualBoxManager.constants.ProcessWaitForFlag_Terminate, 0)
		        except Exception as err:
		            logging.exception(str(err))
		        finally:
		            runner.close()
		            session.console.powerButton()
		    except Exception as err:
		        logging.exception(str(err))
		 
		finally:
		    logging.info('Done')
		    break;
else:
	logging.info("All the machines are busy.")	