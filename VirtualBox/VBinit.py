#! /usr/bin/python
import vboxapi
from time import time, sleep
from const import *
from os.path import basename, normpath, dirname, join
import logging
from os import remove
from subprocess import call


def proc(todo, virtualBoxManager, vbox):
    try:
        remove(normpath(join(dirname(__file__), 'gen/coredump')))
    except Exception as err:
        pass
    try:
        remove(normpath(join(dirname(__file__), 'gen/copy.raw')))
    except Exception as err:
        pass
    try:
        remove(normpath(join(dirname(__file__), 'gen/ama.pcap')))
    except Exception as err:
        pass
    #global virtualBoxManager, vbox
    alreadyRunning = todo.state is virtualBoxManager.constants.MachineState_Running
    logging.info(
        "Machine " + ("started" if alreadyRunning else "starting"))
    session = virtualBoxManager.getSessionObject(vbox)
    if not alreadyRunning:
        todo.lockMachine(session, virtualBoxManager.constants.LockType_Write)
        session.machine.getNetworkAdapter(0).traceFile = normpath(
            join(dirname(__file__), 'gen/ama.pcap'))
        session.machine.getNetworkAdapter(0).traceEnabled = True
        session.machine.saveSettings()
        session.unlockMachine()
        progress = todo.launchVMProcess(session, "headless", '')
    else:
        todo.lockMachine(
            session, virtualBoxManager.constants.LockType_Shared)
    try:
        if not alreadyRunning:
            progress.waitForCompletion(-1)
            if progress.resultCode is not 0:
                raise Exception("Machine failed to start: ",
                                progress.errorInfo.text)
        logging.info("Machine locked")
        start = time()
        while session.console.guest.additionsRunLevel < virtualBoxManager.constants.AdditionsRunLevelType_Userland and time() - start < 180:
            pass
        if not time() - start < 180:
            raise Exception("OS took too long to load")
        logging.debug("OS loaded in %.2f sec", time() - start)
        sleep(10)
        if not alreadyRunning:
            logging.debug('Attempting unlock')
            session.unlockMachine()
            todo.lockMachine(
                session, virtualBoxManager.constants.LockType_Shared)
            logging.debug('New lock successful')
        if todo.snapshotCount < 1:
            logging.info("The machine " + todo.name + " has no snapshot")
            clean = session.machine.takeSnapshot("Clean", None, True)
            clean[0].waitForCompletion(-1)
            logging.info("Clean snapshot created")
        runner = session.console.guest.createSession(UNAME, PASSWD, '', '')
        try:
            runner.waitFor(
                virtualBoxManager.constants.GuestSessionWaitForFlag_Start, 30 * 1000)
            if runner.status is not virtualBoxManager.constants.GuestSessionStatus_Started:
                raise Exception(
                    "Guest session did not start after ", 30, " sec")
            copy = runner.fileCopyToGuest(SOURCE_PATH, DEST_PATH, [])
            copy.waitForCompletion(-1)
            if not runner.fileExists(DEST_PATH, False):
                raise Exception("Copying failed")
            if vbox.getGuestOSType(session.console.guest.OSTypeId).familyId == 'Linux':
                changePermission = runner.processCreate("/bin/chmod", ["+x", DEST_PATH], None, [
                                                        virtualBoxManager.constants.ProcessCreateFlag_WaitForProcessStartOnly], 0)
                changePermission.waitFor(
                    virtualBoxManager.constants.ProcessWaitForFlag_Terminate, 0)
                logging.info("Permissions changed")
            realExec = runner.processCreate(DEST_PATH, [], [], [], 0)
            if realExec.waitFor(virtualBoxManager.constants.ProcessWaitForFlag_Terminate, TIMEOUT_MS) is virtualBoxManager.constants.ProcessWaitResult_Timeout:
                logging.debug("Execution timed out.")

        except Exception as err:
            logging.exception(str(err))
        finally:
            logging.info('Done')
            runner.close()
            # session.console.powerButton()
    except Exception as err:
        logging.exception(str(err))
    finally:
        debugger = session.console.debugger
        debugger.dumpGuestCore(
            normpath(join(dirname(__file__), 'gen/coredump')), '')
        if RESET_STATE:
            pdwn = session.machine.saveState()
            pdwn.waitForCompletion(-1)
            try:
                session.unlockMachine()
                call(['VBoxManage', 'snapshot', 'AMA', 'restore', 'Clean'])
            except Exception as err:
                pass
        else:
            session.unlockMachine()


if __name__ == "__main__":
    logging.basicConfig(
        format='%(levelname)s:\t%(message)s', level=logging.DEBUG)
    virtualBoxManager = vboxapi.VirtualBoxManager(None, None)
    try:
        vbox = virtualBoxManager.getVirtualBox()
        todo = vbox.findMachine(MACH_NAME)
        proc(todo, virtualBoxManager, vbox)
    except Exception as err:
        logging.exception(str(err))

        # virtualBoxManager.closeMachineSession(session)
